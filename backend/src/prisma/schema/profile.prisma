model Profile {
  id                    String                    @id
  user                  User                      @relation(references: [id], fields: [id], onDelete: Cascade)
  username              String                    @unique
  name                  String
  avatar                String?
  bio                   String?
  private               Boolean                   @default(false)
  follower              ProfileRelationship[]     @relation("follower")
  following             ProfileRelationship[]     @relation("following")
  likes                 PostLike[]
  posts                 Post[]
  conversations         ConversationParticipant[]
  messages              Message[]
  sentNotifications     Notification[]            @relation("sender")
  receivedNotifications Notification[]            @relation("recipient")
}

model ProfileRelationship {
  fromId    String
  from      Profile  @relation("following", references: [id], fields: [fromId], onDelete: Cascade)
  toId      String
  to        Profile  @relation("follower", references: [id], fields: [toId], onDelete: Cascade)
  status    Status   @default(PENDING)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@id([fromId, toId])
}

enum Status {
  PENDING
  CONFIRMED
}
