model Post {
  id          String      @id @default(cuid())
  profileId   String
  profile     Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
  text        String
  images      PostImage[]
  tags        PostTag[]
  likes       PostLike[]
  commentOnId String?
  commentOn   Post?       @relation("comment", fields: [commentOnId], references: [id], onDelete: Cascade)
  comments    Post[]      @relation("comment")
  updatedAt   DateTime    @updatedAt
  createdAt   DateTime    @default(now())

  @@index([profileId])
}

model PostImage {
  publicId     String   @id
  type         String
  resourceType String
  version      Int
  postId       String
  post         Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  updatedAt    DateTime @updatedAt
  createdAt    DateTime @default(now())

  @@index([postId])
}

model Tag {
  id    String    @id @default(cuid())
  name  String    @unique
  posts PostTag[]
}

model PostTag {
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  tagId     String
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@id([postId, tagId])
}

model PostLike {
  profileId String
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@id([profileId, postId])
}
